group_by(origin, month) %>%
summarize(count = n())
by_origin_monthly
bookdown::render
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
evals_walkthrough <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_walkthrough)
?evals
evals_walkthrough %>%
sample_n(size = 5)
evals_walkthrough %>%
summarize(mean_bty_avg = mean(bty_avg), mean_score = mean(score),
median_bty_avg = median(bty_avg), median_score = median(score))
evals_walkthrough %>% select(score, bty_avg) %>% skim()
evals_walkthrough %>%
get_correlation(formula = score ~ bty_avg)
ggplot(evals_walkthrough, aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Scatterplot of relationship of teaching and beauty scores")
ggplot(evals_walkthrough, aes(x = bty_avg, y = score)) +
geom_jitter() +
labs(x = "Beauty Score", y = "Teaching Score",
title = "Scatterplot of relationship of teaching and beauty scores")
ggplot(evals_walkthrough, aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score", y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE)
score_model <- lm(score ~ bty_avg, data = evals_walkthrough)
# Get regression table:
get_regression_table(score_model)
# Get regression table:
get_regression_table(score_model)
score_model <- lm(score ~ bty_avg, data = evals_walkthrough)
# Get regression table:
get_regression_table(score_model)
regression_points <- get_regression_points(score_model)
regression_points
library(gapminder)
gapminder2007 <- gapminder %>%
filter(year == 2007) %>%
select(country, lifeExp, continent, gdpPercap)
glimpse(gapminder2007)
gapminder2007 %>% sample_n(size = 5)
gapminder2007 %>%
select(lifeExp, continent) %>%
skim()
ggplot(gapminder2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 5, color = "white") +
labs(x = "Life expectancy", y = "Number of countries",
title = "Histogram of distribution of worldwide life expectancies")
ggplot(gapminder2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 5, color = "white") +
labs(x = "Life expectancy",
y = "Number of countries",
title = "Histogram of distribution of worldwide life expectancies") +
facet_wrap(~ continent, nrow = 2)
ggplot(gapminder2007, aes(x = continent, y = lifeExp)) +
geom_boxplot() +
labs(x = "Continent", y = "Life expectancy",
title = "Life expectancy by continent")
lifeExp_by_continent <- gapminder2007 %>%
group_by(continent) %>%
summarize(median = median(lifeExp),
mean = mean(lifeExp))
lifeExp_by_continent
bookdown::render_book()
lifeExp_model <- lm(lifeExp ~ continent, data = gapminder2007)
get_regression_table(lifeExp_model)
score_model <- lm(score ~ bty_avg,
data = evals_walkthrough)
# Get regression points:
regression_points <- get_regression_points(score_model)
regression_points
regression_points %>%
mutate(squared_residuals = residual^2) %>%
summarize(sum_of_squared_residuals = sum(squared_residuals))
library(ISLR)
evals_walkthrough_multiple <- evals %>%
select(ID, score, age, gender)
glimpse(evals_walkthrough_multiple)
evals_walkthrough_multiple %>% sample_n(size = 5)
evals_walkthrough_multiple %>% select(score, age, gender) %>% skim()
evals_walkthrough_multiple %>%
get_correlation(formula = score ~ age)
ggplot(evals_walkthrough_multiple, aes(x = age, y = score, color = gender)) +
geom_point() +
labs(x = "Age", y = "Teaching Score", color = "Gender") +
geom_smooth(method = "lm", se = FALSE)
score_model_interaction <- lm(score ~ age * gender, data = evals_walkthrough_multiple)
# Get regression table:
get_regression_table(score_model_interaction)
get_regression_table(score_model_interaction)
ggplot(evals_walkthrough_multiple, aes(x = age, y = score, color = gender)) +
geom_point() +
labs(x = "Age", y = "Teaching Score", color = "Gender") +
geom_parallel_slopes(se = FALSE)
score_model_parallel_slopes <- lm(score ~ age + gender, data = evals_walkthrough_multiple)
# Get regression table:
get_regression_table(score_model_parallel_slopes)
regression_points <- get_regression_points(score_model_interaction)
regression_points
library(ISLR)
credit_walkthrough <- Credit %>% as_tibble() %>%
select(ID, debt = Balance, credit_limit = Limit,
income = Income, credit_rating = Rating, age = Age)
glimpse(credit_walkthrough)
credit_walkthrough %>% sample_n(size = 5)
credit_walkthrough %>% select(debt, credit_limit, income) %>% skim()
credit_walkthrough %>% get_correlation(debt ~ credit_limit)
credit_walkthrough %>% get_correlation(debt ~ income)
credit_walkthrough %>%
select(debt, credit_limit, income) %>%
cor()
ggplot(credit_walkthrough, aes(x = credit_limit, y = debt)) +
geom_point() +
labs(x = "Credit limit (in $)", y = "Credit card debt (in $)",
title = "Debt and credit limit") +
geom_smooth(method = "lm", se = FALSE)
ggplot(credit_walkthrough, aes(x = income, y = debt)) +
geom_point() +
labs(x = "Income (in $1000)", y = "Credit card debt (in $)",
title = "Debt and income") +
geom_smooth(method = "lm", se = FALSE)
# Fit regression model:
debt_model <- lm(debt ~ credit_limit + income, data = credit_walkthrough)
# Get regression table:
get_regression_table(debt_model)
get_regression_points(debt_model)
# Interaction model
ggplot(MA_schools,
aes(x = perc_disadvan, y = average_sat_math, color = size)) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Percent economically disadvantaged", y = "Math SAT Score",
color = "School size", title = "Interaction model")
# Parallel slopes model
ggplot(MA_schools,
aes(x = perc_disadvan, y = average_sat_math, color = size)) +
geom_point(alpha = 0.25) +
geom_parallel_slopes(se = FALSE) +
labs(x = "Percent economically disadvantaged", y = "Math SAT Score",
color = "School size", title = "Parallel slopes model")
model_2_interaction <- lm(average_sat_math ~ perc_disadvan * size,
data = MA_schools)
get_regression_table(model_2_interaction)
model_2_parallel_slopes <- lm(average_sat_math ~ perc_disadvan + size,
data = MA_schools)
get_regression_table(model_2_parallel_slopes)
get_regression_points(model_2_interaction)
get_regression_points(model_2_interaction) %>%
summarize(var_y = var(average_sat_math),
var_y_hat = var(average_sat_math_hat),
var_residual = var(residual))
# R-squared for interaction model:
get_regression_summaries(model_2_interaction)
# R-squared for interaction model:
get_regression_summaries(model_2_interaction)
# R-squared for parallel slopes model:
get_regression_summaries(model_2_parallel_slopes)
credit_walkthrough %>% select(debt, income) %>%
mutate(income = income * 1000) %>%
cor()
library(tidyverse)
library(moderndive)
tactile_prop_red
ggplot(tactile_prop_red, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 50 balls that were red",
title = "Distribution of 33 proportions red")
bowl
View(bowl)
virtual_shovel <- bowl %>%
rep_sample_n(size = 50)
virtual_shovel
virtual_shovel %>%
mutate(is_red = (color == "red"))
virtual_shovel %>%
mutate(is_red = (color == "red")) %>%
summarize(num_red = sum(is_red))
virtual_shovel %>%
mutate(is_red = color == "red") %>%
summarize(num_red = sum(is_red)) %>%
mutate(prop_red = num_red / 50)
virtual_samples
virtual_samples <- bowl %>%
rep_sample_n(size = 50, reps = 33)
virtual_samples
View(virtual_samples)
virtual_prop_red <- virtual_samples %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 50)
virtual_prop_red
ggplot(virtual_prop_red, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 50 balls that were red",
title = "Distribution of 33 proportions red")
virtual_samples <- bowl %>%
rep_sample_n(size = 50, reps = 1000)
virtual_samples
virtual_prop_red <- virtual_samples %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 50)
virtual_prop_red
ggplot(virtual_prop_red, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 50 balls that were red",
title = "Distribution of 1000 proportions red")
virtual_samples_50 <- bowl %>%
rep_sample_n(size = 50, reps = 1000)
# 2.b) Compute resulting 1000 replicates of proportion red
virtual_prop_red_50 <- virtual_samples_50 %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 50)
# 2.c) Plot distribution via a histogram
ggplot(virtual_prop_red_50, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 50 balls that were red", title = "50")
# Segment 3: sample size = 100 ------------------------------
# 3.a) Virtually using shovel with 100 slots 1000 times
virtual_samples_100 <- bowl %>%
rep_sample_n(size = 100, reps = 1000)
# 3.b) Compute resulting 1000 replicates of proportion red
virtual_prop_red_100 <- virtual_samples_100 %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 100)
# 3.c) Plot distribution via a histogram
ggplot(virtual_prop_red_100, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 100 balls that were red", title = "100")
# n = 25
virtual_prop_red_25 %>%
summarize(sd = sd(prop_red))
virtual_samples_25 <- bowl %>%
rep_sample_n(size = 25, reps = 1000)
# 1.b) Compute resulting 1000 replicates of proportion red
virtual_prop_red_25 <- virtual_samples_25 %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 25)
# 1.c) Plot distribution via a histogram
ggplot(virtual_prop_red_25, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 25 balls that were red", title = "25")
# Segment 2: sample size = 50 ------------------------------
# 2.a) Virtually use shovel 1000 times
virtual_samples_50 <- bowl %>%
rep_sample_n(size = 50, reps = 1000)
# 2.b) Compute resulting 1000 replicates of proportion red
virtual_prop_red_50 <- virtual_samples_50 %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 50)
# 2.c) Plot distribution via a histogram
ggplot(virtual_prop_red_50, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 50 balls that were red", title = "50")
# Segment 3: sample size = 100 ------------------------------
# 3.a) Virtually using shovel with 100 slots 1000 times
virtual_samples_100 <- bowl %>%
rep_sample_n(size = 100, reps = 1000)
# 3.b) Compute resulting 1000 replicates of proportion red
virtual_prop_red_100 <- virtual_samples_100 %>%
group_by(replicate) %>%
summarize(red = sum(color == "red")) %>%
mutate(prop_red = red / 100)
# 3.c) Plot distribution via a histogram
ggplot(virtual_prop_red_100, aes(x = prop_red)) +
geom_histogram(binwidth = 0.05, boundary = 0.4, color = "white") +
labs(x = "Proportion of 100 balls that were red", title = "100")
virtual_prop_red_25 %>%
summarize(sd = sd(prop_red))
# n = 50
virtual_prop_red_50 %>%
summarize(sd = sd(prop_red))
# n = 100
virtual_prop_red_100 %>%
summarize(sd = sd(prop_red))
bowl %>%
summarize(red = sum(color == "red"))
virtual_shovel <- bowl %>%
rep_sample_n(size = 50)
virtual_shovel
library(tidyverse)
library(moderndive)
library(infer)
pennies_sa
pennies_sample
ggplot(pennies_sample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white")
x_bar
x_bar <- pennies_sample %>%
summarize(mean_year = mean(year))
x_bar
pennies_resample <- tibble(
year = c(1976, 1962, 1976, 1983, 2017, 2015, 2015, 1962, 2016, 1976,
2006, 1997, 1988, 2015, 2015, 1988, 2016, 1978, 1979, 1997,
1974, 2013, 1978, 2015, 2008, 1982, 1986, 1979, 1981, 2004,
2000, 1995, 1999, 2006, 1979, 2015, 1979, 1998, 1981, 2015,
2000, 1999, 1988, 2017, 1992, 1997, 1990, 1988, 2006, 2000)
)
ggplot(pennies_resample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
labs(title = "Resample of 50 pennies")
ggplot(pennies_sample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
labs(title = "Original sample of 50 pennies")
pennies_resample %>%
summarize(mean_year = mean(year))
pennies_resample <- tibble(
year = c(1976, 1962, 1976, 1983, 2017, 2015, 2015, 1962, 2016, 1976,
2006, 1997, 1988, 2015, 2015, 1988, 2016, 1978, 1979, 1997,
1974, 2013, 1978, 2015, 2008, 1982, 1986, 1979, 1981, 2004,
2000, 1995, 1999, 2006, 1979, 2015, 1979, 1998, 1981, 2015,
2000, 1999, 1988, 2017, 1992, 1997, 1990, 1988, 2006, 2000)
)
ggplot(pennies_resample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
labs(title = "Resample of 50 pennies")
ggplot(pennies_sample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
labs(title = "Original sample of 50 pennies")
pennies_resample %>%
summarize(mean_year = mean(year))
pennies_resample
pennies_resamples
resampled_means <- pennies_resamples %>%
group_by(name) %>%
summarize(mean_year = mean(year))
resampled_means
resampled_means %>% View()
ggplot(resampled_means, aes(x = mean_year)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990) +
labs(x = "Sampled mean year")
virtual_shovel <- bowl %>%
rep_sample_n(size = 50)
virtual_resample <- pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE)
virtual_resampl
virtual_resample
virtual_resamples <- pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 35)
virtual_resamples
virtual_resampled_means <- virtual_resamples %>%
group_by(replicate) %>%
summarize(mean_year = mean(year))
virtual_resampled_means
virtual_resamples <- pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000)
# Compute 1000 sample means
virtual_resampled_means <- virtual_resamples %>%
group_by(replicate) %>%
summarize(mean_year = mean(year))
virtual_resampled_means <- pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000) %>%
group_by(replicate) %>%
summarize(mean_year = mean(year))
virtual_resampled_means
ggplot(virtual_resampled_means, aes(x = mean_year)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990) +
labs(x = "sample mean")
virtual_resampled_means %>%
summarize(mean_of_means = mean(mean_year))
virtual_resampled_means %>%
summarize(SE = sd(mean_year))
pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000)
pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000) %>%
group_by(replicate)
pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000) %>%
group_by(replicate) %>%
summarize(mean_year = mean(year))
pennies_sample %>%
summarize(stat = mean(year))
pennies_sample %>%
specify(response = year) %>%
calculate(stat = "mean")
pennies_sample %>%
specify(response = year)
pennies_sample %>%
specify(formula = year ~ NULL)
pennies_sample %>%
specify(response = year) %>%
generate(reps = 1000, type = "bootstrap")
bootstrap_distribution <- pennies_sample %>%
specify(response = year) %>%
generate(reps = 1000) %>%
calculate(stat = "mean")
bootstrap_distribution
visualize(bootstrap_distribution)
percentile_ci <- bootstrap_distribution %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci
visualize(bootstrap_distribution) +
shade_confidence_interval(endpoints = percentile_ci)
visualize(bootstrap_distribution) +
shade_ci(endpoints = percentile_ci, color = "hotpink", fill = "khaki")
standard_error_ci <- bootstrap_distribution %>%
get_confidence_interval(type = "se", point_estimate = x_bar)
standard_error_ci
visualize(bootstrap_distribution) +
shade_confidence_interval(endpoints = standard_error_ci)
bowl %>%
summarize(p_red = mean(color == "red"))
bowl_sample_1
bowl_sample_1 %>%
specify(response = color)
bowl_sample_1 %>%
specify(response = color, success = "red")
bowl_sample_1 %>%
specify(response = color, success = "red") %>%
generate(reps = 1000, type = "bootstrap")
sample_1_bootstrap <- bowl_sample_1 %>%
specify(response = color, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop")
sample_1_bootstrap
percentile_ci_1 <- sample_1_bootstrap %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci_1
sample_1_bootstrap %>%
visualize(bins = 15) +
shade_confidence_interval(endpoints = percentile_ci_1) +
geom_vline(xintercept = 0.42, linetype = "dashed")
bowl_sample_2 <- bowl %>% rep_sample_n(size = 50)
bowl_sample_2
sample_2_bootstrap <- bowl_sample_2 %>%
specify(response = color,
success = "red") %>%
generate(reps = 1000,
type = "bootstrap") %>%
calculate(stat = "prop")
sample_2_bootstrap
percentile_ci_2 <- sample_2_bootstrap %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci_2
mythbusters_yawn
mythbusters_yawn %>%
group_by(group, yawn) %>%
summarize(count = n())
mythbusters_yawn %>%
specify(formula = yawn ~ group)
mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes")
first_six_rows <- head(mythbusters_yawn)
first_six_rows
first_six_rows %>%
sample_n(size = 6, replace = TRUE)
mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes") %>%
generate(reps = 1000, type = "bootstrap")
mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in props")
bootstrap_distribution_yawning <- mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in props", order = c("seed", "control"))
bootstrap_distribution_yawning
visualize(bootstrap_distribution_yawning) +
geom_vline(xintercept = 0)
bootstrap_distribution_yawning %>%
get_confidence_interval(type = "percentile", level = 0.95)
obs_diff_in_props <- mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes") %>%
# generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in props", order = c("seed", "control"))
obs_diff_in_props
myth_ci_se <- bootstrap_distribution_yawning %>%
get_confidence_interval(type = "se", point_estimate = obs_diff_in_props)
myth_ci_se
bookdown::render_book()
library(tidyverse)
library(tidyverse)
library(here)
df <- read_csv("/Users/spencergreenhalgh/Desktop/Fall 22 through spring 24 course offerings(Sheet1).csv")
df %>% View()
df %>%
filter(AY =="23-24") %>%
filter(Semester == "Spring") %>%
View()
df %>% str_detect(Class, "ICT")
?str_detect()
str_detect(df$Class,"ICT")
df %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(str_detect(df$Class,"ICT"))
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring")
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% View()
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Face to face") %>% filter(`Course Number` > 300) %>% View()
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% filter(`Course Number` > 300) %>% View()
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% View()
df %>% filter(str_detect(df$Class,"IS")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% View()
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% View()
df %>% View()
df %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% View()
df %>% filter(AY == "23-24") %>% filter(Semester == "Fall") %>% filter(Format == "Online") %>% View()
df %>% filter(str_detect(df$Class,"ICT")) %>% filter(AY == "23-24") %>% filter(Semester == "Spring") %>% filter(Format == "Online") %>% View()
bookdown::render_book()
bookdown::render_book()
install.packages("bookdown")
bookdown::render_book()
